import cx from 'classnames';
import { ButtonHTMLAttributes, MouseEventHandler, ReactNode } from 'react';
import CircleLoading from '../Loading/CircleLoading'; /* prettier-ignore */
type DLProps = { children?: ReactNode; rightSection?: ReactNode };
/* prettier-ignore */ function DashboardLayout({ children, rightSection }: DLProps) { return (<div className="w-[100%] flex flex-col-reverse gap-[40px] xl:flex-row "> {' '} <div className="w-full xl:w-[calc(100%-260px)]">{children}</div>{' '} <div className="xl:w-[220px] w-full">{rightSection}</div>{' '} </div>); }
/* prettier-ignore */ type DWProps = { isHidden?: boolean; children?: ReactNode; className?: string };
/* prettier-ignore */ export function DashboardWrapper({ isHidden, children, className }: DWProps) { return (<div className={cx(isHidden && 'opacity-[0.5]')}> {' '} <div className={cx('px-[20px] md:px-[30px] py-[30px] bg-[#F2EBF9] rounded-[12px] flex flex-col gap-[20px]', className)} > {' '} {children}{' '} </div>{' '} </div>); }
/* prettier-ignore */ type ButtonProps = Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'>;
/* prettier-ignore */ type DBProps = { resetOnClick?: MouseEventHandler<HTMLButtonElement>; updateOnClick?: MouseEventHandler<HTMLButtonElement>; resetBtnProps?: ButtonProps; updateBtnProps?: ButtonProps; resetBtnText?: string; updateBtnText?: string; isLoading?: boolean; className?: string; disabled?: boolean };
/* prettier-ignore */ export function DashboardButton({ resetBtnProps, resetOnClick, updateBtnProps, updateOnClick, resetBtnText, updateBtnText, className, isLoading, disabled }: DBProps) { return (<div className={cx('flex justify-end gap-[20px] ', className)}> {' '} <button onClick={resetOnClick} type="button" {...resetBtnProps} className={cx('h-[44px] px-5 uppercase text-primary hover:bg-[rgb(90,47,132,.1)] transition-all duration-200 border-primary border w-[150px] font-medium rounded text-[18px] ', resetBtnProps?.className)} > {' '} {resetBtnText || 'Reset'}{' '} </button>{' '} <button type="submit" disabled={disabled} onClick={updateOnClick} {...updateBtnProps} className={cx('h-[44px] justify-center uppercase transition-all duration-200 hover:bg-[#41225f] bg-primary w-[150px] font-medium flex items-center gap-2 rounded text-[18px] text-white disabled:bg-slate-400 disabled:cursor-not-allowed', updateBtnProps?.className)} > {' '} {isLoading ? (<> {' '} <div> {' '} <CircleLoading color="#fff" width={24} />{' '} </div>{' '} <div className="text-base uppercase">Loading...</div>{' '} </>) : (updateBtnText || 'Update')}{' '} </button>{' '} </div>); }

export default DashboardLayout;
